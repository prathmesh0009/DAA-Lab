#include <stdio.h>
#define INF 99999
#define MAX_N 20 // Maximum value for N
void floydWarshall(int graph[MAX_N][MAX_N], int n) {
    int dist[MAX_N][MAX_N];

    // Initialize distance matrix same as input graph
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            dist[i][j] = graph[i][j];

    // Floyd-Warshall algorithm
    for (int k = 0; k < n; k++) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (dist[i][k] != INF && dist[k][j] != INF &&
                    dist[i][k] + dist[k][j] < dist[i][j]) {
                    dist[i][j] = dist[i][k] + dist[k][j];
                }
            }
        }
    }
    printf("The following matrix shows the shortest distances between all pairs of the vertices.\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (dist[i][j] == INF)
                printf("%5s", "INF");
            else
                printf("%5d", dist[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int n, e;
    int graph[MAX_N][MAX_N];

    printf("Enter the number of vertices : ");
    scanf("%d", &n);
    printf("Enter the number of edges : ");
    scanf("%d", &e);

    // Initialize the graph with INF, and 0 for same node
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            graph[i][j] = (i == j) ? 0 : INF;

    // Read edge data
    for (int i = 0; i < e; i++) {
        int src, dest, wt;
        printf("Enter source : ");
        scanf("%d", &src);
        printf("Enter destination : ");
        scanf("%d", &dest);
        printf("Enter weight : ");
        scanf("%d", &wt);

        // Adjust for 0-based index
        graph[src - 1][dest - 1] = wt;
    }

    // Call the algorithm
    floydWarshall(graph, n);

    return 0;
}
